{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Playbooks","text":"<p>The Playbook and Plays concept is used to curate a consistent information, so the right information can be found and used more effectively by all.</p> <ul> <li>A Play is a document that details practices and an approach for a specific task</li> <li>A Playbook is a collection of Plays that are related by topic, e.g. Billie Engineering playbook could cover the practices for deployment, accessing databases, system integration testing, optimising builds in docker.</li> </ul> <p>Engineering Playbook Initiative</p> <p>Establishing a playbook within an organisation encourages information sharing across teams and provides an effective way for disperate teams to learn from each other.</p> <p></p> New Book - content under development <p>Practicalli Engineering Playbook was started in January 2022 in an attempt to codify the last few decades of development experience, so this will be an on-going work</p>"},{"location":"#development-workflow","title":"Development Workflow","text":"<p>Development workflow overview provides a high-level overview of the options available for developing services at Billie, including establishing a project, general development tools and continuous integration workflow.</p> <p>Deployment workflow via Jenkins overview provides a high-level overview of the Jenkins CI pipeline, including how to Configure Service deployment on test instance via Jenkins Pipeline</p>"},{"location":"#general-development-tools","title":"General Development tools","text":"<ul> <li>MegaLinter - verify code and configuration consistency - a wide range of open source tools that run in a docker container to minimise install and as a GitHub action for CI support</li> <li>Makefile - consistent tasks across projects - simplify on-boarding and daily development of projects</li> </ul>"},{"location":"#programming-languages","title":"Programming Languages","text":"<p>Guides to development tools &amp; workflows for specific programming languages, including testing and deployment of services</p>"},{"location":"#clojure","title":"Clojure","text":"<ul> <li>Clojure Development Overview</li> <li>Clojure development environment guide</li> <li>Clojure Workflow - REPL Driven Development</li> <li>Deploy Clojure Services via Jenkins and System Integration testing</li> </ul>"},{"location":"#continuous-integration","title":"Continuous Integration","text":"<ul> <li>Dockerfile Multi-stage build configuration</li> <li>GitHub Actions and common workflow</li> </ul>"},{"location":"#book-source-code","title":"Book Source code","text":"<p>practicalli/playbooks repository contains the content for this book</p> HTTPSSSH <pre><code>git clone https://github.com/practicalli/engineering-playbooks.git\n</code></pre> <pre><code>git clone git@github.com:practicalli/engineering-playbook.git\n</code></pre>"},{"location":"#discussions-and-feedback","title":"Discussions and feedback","text":"<p>Contributions are welcome via GitHub issues and pull requests, or discuss the book on the Clojurians Slack community.</p> <p></p> <p>Get a free Clojurians slack community account</p>"},{"location":"#sponsor-my-work","title":"Sponsor my work","text":"<p>The majority of my work is now focused on the Practicalli series of books and videos and an advisory role with several communities</p> <p>Thank you to Cognitect, Nubank and a wide range of other sponsors from the Clojure community for your continued support</p>"},{"location":"#creative-commons-license","title":"Creative commons license","text":"This work is licensed under a Creative Commons Attribution 4.0 ShareAlike License (including images &amp; stylesheets)."},{"location":"assets/images/social/","title":"Social Cards","text":"<p>Social Cards are visual previews of the website that are included when sending links via social media platforms.</p> <p>Material for MkDocs is configured to generate beautiful social cards automatically, using the colors, fonts and logos defined in <code>mkdocs.yml</code></p> <p>Generated images are stored in this directory.</p>"},{"location":"command-line/","title":"Command Line","text":"<p>Terminal apps, shells, configuration tips, etc.</p>"},{"location":"command-line/kitty-terminal/","title":"Kitty terminal","text":"<p>Kitty Terminal is a fast, feature-rich, GPU based terminal emulator</p>"},{"location":"command-line/kitty-terminal/#install","title":"install","text":"Ubuntu/DebianHomebrew <pre><code>sudo apt install kitty\n</code></pre> <pre><code>brew install --cask kitty\n</code></pre> <p>Copy the installed configuration to make personal changes, or start a new configuration file in <code>~/.config/kitty/kitty.conf</code></p> <pre><code>cp /usr/share/doc/kitty/examples/kitty.conf ~/.config/kitty/\n</code></pre>"},{"location":"command-line/kitty-terminal/#common-configuration-options","title":"Common configuration options","text":"<pre><code>font_family FiraCode\nfont_size 16\n</code></pre>"},{"location":"command-line/kitty-terminal/#multiple-sessions","title":"Multiple sessions","text":"<p>Ctrl+Shift+T to create a new session in a tab window</p> <p>Ctrl+Shift+Left or Right to switch between tabs to the left or right</p> <p>Ctrl+Shift+Enter to create a new session in split window</p> <p>Ctrl+Shift+[ or ] to switch between window splits</p>"},{"location":"command-line/kitty-terminal/#kitten-features","title":"Kitten features","text":"<p>kittens provide additional features.  Recommended features include:</p> <ul> <li>Theme kitten - in-terminal theme browser and selector</li> <li>diff - fast, side-by-side diff for the terminal with syntax highlighting</li> <li>Clipboard - Copy/paste to the clipboard from shell scripts, even over SSH</li> <li>SSH - SSH with automatic shell integration, connection re-use for low latency and easy cloning of local shell and editor configuration to the remote host</li> </ul>"},{"location":"command-line/kitty-terminal/#themes","title":"Themes","text":"<p>Theme kitten provides a simple way to browse available themes and select a theme for use</p> <p>Browse available themes and apply one, or Ctrl+c to cancel</p> <pre><code>kitty +kitten themes\n</code></pre> <p>Change themes automatically to the given theme name (the theme must exist)</p> <pre><code>kitty +kitten theme theme-name\n</code></pre> <p>The first time the theme kitten is run the following config is added to the <code>~.config/kitty/kitty.conf</code> file and the chosen theme configuration written to the  <code>~/.config/kitty/current-theme.conf</code> file</p> <p>This configuration shows the name of the theme, which is also in the top of the <code>current-theme.conf</code> file</p> <pre><code># BEGIN_KITTY_THEME\n# GitHub Dark\ninclude current-theme.conf\n# END_KITTY_THEME\n</code></pre> <p>Icon support from Nerd fonts, download and include the configuration to show icons in terminal based editors (e.g. Neovim, Emacs, etc.)</p> <pre><code>include ./nerdfont-icons.conf\n</code></pre>"},{"location":"command-line/kitty-terminal/#diff","title":"Diff","text":"<p>The Diff kitten provides a fast way to compare files, although there is no support for merging changes.</p> <p>Kitty supports diff of image files, showing the two images side by side.</p> <pre><code>kitty +kitten diff file1 file2\n</code></pre> <p>, or &gt; jumps to next diff match</p> <p>. or &lt;  jumps to previous diff match</p> <ul> <li>All keyboard controls</li> </ul>"},{"location":"command-line/kitty-terminal/#ssh","title":"SSH","text":"<p>The <code>+kitten</code> option ensures the remote environment is configured correctly for the Kitty terminal</p> <pre><code>kitty +kitten ssh hostname\n</code></pre>"},{"location":"command-line/kitty-terminal/#example-configuration","title":"Example configuration","text":"<p>Practicalli uses the following configuration for Kitty terminal across multiple operating systems</p> ~/.config/kitty/kitty.conf<pre><code># ---------------------------------------------------------\n# Practicalli Kitty terminal theme\n#\n# Configuration using GitHub theme with light and dark options\n# using FiraCode font and NerdFont symbol mappings for icon support\n# for powerline10k and web-devicons in Neovim\n# ---------------------------------------------------------\n# ---------------------------------------------------------\n# Colorscheme / Icons\n# Icons from NerdFont (install Nerdfont symbols only theme)\ninclude ./nerdfont-icons.conf\n\n# `kitty +kitten theme` to browse available themes and apply one\n# `kitty +kitten theme theme-name` to change themes automatically\n# Favorite themese include:\n# Catppuccin-Latte and Catppuccin-Mocha\n# GitHub Light and GitHub Dark\n# BEGIN_KITTY_THEME\n# GitHub Dark\ninclude current-theme.conf\n# END_KITTY_THEME\n# ---------------------------------------------------------\n# ---------------------------------------------------------\n# Feedback\nenable_audio_bell no\n# visual_bell_color none\n# ---------------------------------------------------------\n# ---------------------------------------------------------\n# Tab styles\n# fade slant separator powerline custom hidden\ntab_bar_style powerline\ntab_bar_align left\ntab_powerline_style angled\n# ---------------------------------------------------------\n# ---------------------------------------------------------\n# Fonts\nfont_family FiraCode\n\n# Patched fonts (not recommended for Kitty)\n# font_family MesloLGS NF\n# font_family Fira Code NF\n# bold_font        auto\n# italic_font      auto\n# bold_italic_font auto\nfont_size 14\n# adjust_line_height  0\n# adjust_column_width 0\n# adjust_baseline 0\n# ---------------------------------------------------------\n</code></pre>"},{"location":"introduction/contributing/","title":"Contributing to Practicalli Engineering Playbook","text":"<p>practicalli/engineering-playbook is written in markdown and uses GitBook to generate the website via a GitHub action.</p> <p>By submitting content ideas and corrections you are agreeing they can be used in this workshop under the Creative Commons Attribution ShareAlike 4.0 International license.  Attribution will be detailed via GitHub contributors.</p> <p>All content and interaction with any persons or systems must be done so with respect and within the Practicalli Code of Conduct.</p>"},{"location":"introduction/contributing/#book-status","title":"Book status","text":""},{"location":"introduction/contributing/#submit-and-issue-or-idea","title":"Submit and issue or idea","text":"<p>If something doesnt seem quite right or something is missing from the book, please raise an issue via the GitHub repository explaining in as much detail as you can.</p>"},{"location":"introduction/contributing/#considering-a-pull-request","title":"Considering a Pull request?","text":"<p>Before investing any time in a pull request, please raise an issue explaining the situation.  This can save you and the maintainer time and avoid rejected pull requests.</p> <p>Please keep pull requests small and focused, as they are much quicker to review and easier to accept.  Ideally PR's should be for a specific page or at most a section.</p> <p>A PR with a list of changes across different sections will not be merged, it will be reviewed eventually though.</p>"},{"location":"introduction/contributing/#thank-you-to-everyone-that-has-contributed","title":"Thank you to everyone that has contributed","text":"<p>A huge thank you to Rich Hickey and the team at Cognitect for creating and continually guiding the Clojure language.  Special thank you to Alex Miller who has provided excellent advice on working with Clojure and the CLI tooling.</p> <p>The Clojure community has been highly supportive of everyone using Clojure and I'd like to thank everyone for the feedback and contributions.  I would also like to thank everyone that has joined in with the London Clojurins community, ClojureBridgeLondon, Clojurians Slack community, Clojurians Zulip community and Clojureverse community.</p> <p>Thank you to everyone who sponsors the Practicalli websites and videos and for the Clojurists Together sponsorship, it helps me continue the work at a much faster pace.</p> <p>Special thanks to Bruce Durling for getting me into Cloure in the first place.</p> <p></p>"},{"location":"introduction/writing-tips/","title":"Writing tips for MkDocs","text":"<p>Making the docs more engaging using the mkdocs-material theme reference guide</p>"},{"location":"introduction/writing-tips/#hypertext-links","title":"Hypertext links","text":"<p>Links open in the same browser window/tab by default.</p> <p>Add <code>{target=_blank}</code> to the end of a link to configure opening in a new tab</p> <pre><code>[link text](url){target=_blank}\n</code></pre>"},{"location":"introduction/writing-tips/#buttons","title":"Buttons","text":"<p>Convert any link into a button by adding <code>{ .md-button }</code> class names to end of the markdown for a link, which uses <code>.md-button-primary</code> by default.  Include <code>target=_blank</code> for buttons with links to external sites.</p> <pre><code>[link text](http://practical.li/blog){ .md-button target=_blank }\n</code></pre> <p> Practicalli Blog</p> <p>Add an icon to the button with fontawsome</p> <p> Practicalli Issues</p>"},{"location":"introduction/writing-tips/#youtube-video","title":"YouTube video","text":"<p>Use an iframe element to include a YouTube video, wrapping in a paragraph tag with center alignment to place the video in a centered horizontal position</p> <pre><code>&lt;p style=\"text-align:center\"&gt;\n&lt;iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/rQ802kSaip4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;\n&lt;/p&gt;\n</code></pre> <p>mkdocs material does not have direct support for adding a YouTube video via markdown.</p>"},{"location":"introduction/writing-tips/#admonitions","title":"Admonitions","text":"<p>Supported admonition types</p> <p>Note</p> <p>Use <code>!!!</code> followed by <code>NOTE</code></p> <p>Adding a title</p> <p>Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> <p>Shh, no title bar just the text... Use <code>!!!</code> followed by <code>NOTE</code> and a <code>\"\"</code> empty double quotes</p> <p>Abstract</p> <p>Use <code>!!!</code> followed by <code>ABSTRACT</code></p> <p>Info</p> <p>Use <code>!!!</code> followed by <code>INFO</code></p> <p>Tip</p> <p>Use <code>!!!</code> followed by <code>TIP</code></p> <p>Success</p> <p>Use <code>!!!</code> followed by <code>SUCCESS</code></p> <p>Question</p> <p>Use <code>!!!</code> followed by <code>QUESTION</code></p> <p>Warning</p> <p>Use <code>!!!</code> followed by <code>WARNING</code></p> <p>Failure</p> <p>Use <code>!!!</code> followed by <code>FAILURE</code></p> <p>Danger</p> <p>Use <code>!!!</code> followed by <code>DANGER</code></p> <p>Bug</p> <p>Use <code>!!!</code> followed by <code>BUG</code></p> <p>Example</p> <p>Use <code>!!!</code> followed by <code>EXAMPLE</code></p> <p>Quote</p> <p>Use <code>!!!</code> followed by <code>QUOTE</code></p>"},{"location":"introduction/writing-tips/#collapsing-admonitions","title":"Collapsing admonitions","text":"Note <p>Collapse those admonitions using <code>???</code> instead of <code>!!!</code></p> Replace with a title <p>Use <code>???</code> followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p> Expanded by default <p>Use <code>???+</code>, note the <code>+</code> character,  followed by <code>NOTE</code> and a <code>\"title in double quotes\"</code></p>"},{"location":"introduction/writing-tips/#inline-blocks","title":"Inline blocks","text":"<p>Inline blocks of text to make a very specific callout within text</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Adding something to then end of text is probably my favourite</p> <p>Info</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p>"},{"location":"introduction/writing-tips/#code-blocks","title":"Code blocks","text":"<p>Code blocks include a copy icon automatically</p> <p>Syntax highlighting in code blocks</p> <pre><code>(defn my-function  ; Write a simple function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>Give the code block a title using <code>title=\"\"</code> after the backtics and language name</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>We all like line numbers, especially when you can set the starting line</p> src/practicalli/gameboard.clj<pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre> <p>Add <code>linenums=42</code> to start line numbers from 42 onward</p> <pre><code>clojure linenums=\"42\" title=\"src/practicalli/gameboard.clj\"\n</code></pre>"},{"location":"introduction/writing-tips/#annotations","title":"Annotations","text":"<p>Add an annotation using <code># (1)</code> where 1 is the number of the annotation</p> <pre><code>ls -la $HOME/Downloads  # (1)\n</code></pre> <pre><code>1.  :woman_raising_hand: I'm a code annotation! I can contain `code`, __formatted text__, images, ... basically anything that can be written in Markdown.\n</code></pre> <p>Code blocks with annotation, add <code>!</code> after the annotation number to suppress the <code>#</code> character</p> <p><pre><code>(defn helper-function\n\"Doc-string with description of function purpose\" ; (1)!\n[data]\n(merge {:fish 1} data)\n)\n</code></pre> 1.  Always include a doc-string in every function to describe the purpose of that function, identifying why it was added and what its value is.</p> <p>GitHub action example with multiple annotations</p> <p>GitHub action example with multiple annotations</p> <pre><code>name: ci # (1)!\non:\npush:\nbranches:\n- master # (2)!\n- main\npermissions:\ncontents: write\njobs:\ndeploy:\nruns-on: ubuntu-latest\nsteps:\n- uses: actions/checkout@v3\n- uses: actions/setup-python@v4\nwith:\npython-version: 3.x\n- run: pip install mkdocs-material # (3)!\n- run: mkdocs gh-deploy --force\n</code></pre> <ol> <li> <p>You can change the name to your liking.</p> </li> <li> <p>At some point, GitHub renamed <code>master</code> to <code>main</code>. If your default branch     is named <code>master</code>, you can safely remove <code>main</code>, vice versa.</p> </li> <li> <p>This is the place to install further [MkDocs plugins] or Markdown     extensions with <code>pip</code> to be used during the build:</p> <pre><code>pip install \\\nmkdocs-material \\\nmkdocs-awesome-pages-plugin \\\n...\n</code></pre> </li> </ol>"},{"location":"introduction/writing-tips/#highlight-lines-in-code-blocks","title":"Highlight lines in code blocks","text":"<p><code>hl_lines=\"2\"</code> where 2 is the line number to highlight</p> <pre><code>(defn my-function\n\"With a lovely doc-string\"\n[arguments]\n(map inc [1 2 3]))\n</code></pre>"},{"location":"introduction/writing-tips/#content-tabs","title":"Content tabs","text":"<p>Create in page tabs that can also be</p> <p>Setting up a project</p> Clojure CLILeiningen <pre><code>clojure -T:project/new :template app :name practicalli/gameboard\n</code></pre> <pre><code>lein new app practicalli/gameboard\n</code></pre> <p>Or nest the content tabs in an admonition</p> <p>Run a terminal REPL</p> Clojure CLILeiningen <pre><code>clojure -T:repl/rebel\n</code></pre> <pre><code>lein repl\n</code></pre>"},{"location":"introduction/writing-tips/#diagrams","title":"Diagrams","text":"<p>Neat flow diagrams</p> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <p>UML Sequence Diagrams</p> <pre><code>sequenceDiagram\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <p>state transition diagrams</p> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <p>Class diagrams - but dont need them.</p> <p>Entity relationship diagrams are handy though</p> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre>"},{"location":"introduction/writing-tips/#other-diagram-types","title":"Other diagram types","text":"<p>Besides the diagram types listed above, [Mermaid.js] provides support for pie charts, gantt charts, user journeys, git graphs and requirement diagrams, all of which are not officially supported by Material for MkDocs. Those diagrams should still work as advertised by [Mermaid.js], but we don't consider them a good choice, mostly as they don't work well on mobile.</p>"},{"location":"introduction/writing-tips/#formatting","title":"Formatting","text":"<p>Keyboard keys for all those key bindings... each number and alphabet character has their own key</p> <p>Space or Space for leader and , for local leader</p> <p>Punctionation keys by name, e.g. |</p> <p>Left+Up+Down+Right</p> <p>Meta+X for all the classic Emacs fun</p> <p>Ctrl+Alt+Del</p>"},{"location":"introduction/writing-tips/#grids","title":"Grids","text":"<p>Useful for putting button links on the main page as quick links into the key parts of the book</p> <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <p>Sponsor only feature</p>"},{"location":"introduction/writing-tips/#images","title":"Images","text":"<p>Oh yesssss... aligning images... I am in love... and lazy loading too</p> <p></p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>If the image is too big then it will simply take up the whole width of the page</p> <p>When adding the color pallet toggle, have different images for light and dark</p> <p> </p>"},{"location":"introduction/writing-tips/#lists","title":"Lists","text":"<p>Task lists</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul>"},{"location":"introduction/writing-tips/#tooltips","title":"Tooltips","text":"<p>The humble tool tip</p> <p>Hover me</p> <p>with references</p> <p>Hover me</p> <p>Icon tool tip with a title</p> <p></p>"},{"location":"introduction/writing-tips/#abreviations","title":"Abreviations","text":"<p>The HTML specification is maintained by the W3C.</p> <p>[HTML]: Hyper Text Markup Language [W3C]: World Wide Web Consortium</p>"},{"location":"introduction/writing-tips/#magic-links","title":"Magic links","text":"<p>MagicLink can auto-link HTML, FTP, and email links. It can auto-convert repository links (GitHub, GitLab, and Bitbucket) and display them in a more concise, shorthand format.</p> <p>Email Practicalli</p> <p>Practicalli Neovim</p>"}]}